/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package huffmanencoding;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.Set;

/**
 *
 * @author MScIT19
 */

public class HuffManEncoding {
    
//    void order(hashcode node) 
//    { 
//        if (node == null) 
//            return; 
//  
//        /* first recur on left child */
//        order(node.llink); 
//  
//        /* then print the data of node */
//        System.out.print(node.c + " "); 
//  
//        /* now recur on right child */
//        order(node.rlink); 
//    } 
    public static void Code(hashcode root, String s) 
    { 
  
        // base case; if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 
        if (root.llink 
                == null
            && root.rlink 
                   == null
            && Character.isLetter(root.c)) { 
  
            // c is the character in the node 
            System.out.println(root.c + ":" + s); 
  
            return; 
        } 
  
        // if we go to left then add "0" to the code. 
        // if we go to the right add"1" to the code. 
  
        // recursive calls for left and 
        // right sub-tree of the generated tree. 
        Code(root.llink, s + "0"); 
        Code(root.rlink, s + "1"); 
    } 

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        char a,b,p;
        String str,strl;
        int i,j = 0,count = 0;
        boolean ty= false;
        Scanner input = new Scanner(System.in);
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        PriorityQueue<hashcode> q =  new PriorityQueue<hashcode>(new IntComparator());
        str = input.nextLine();
       
        strl = str.toLowerCase();
        for(i=0;i<strl.length();i++)
        {
            p = str.charAt(i);
            if (map.containsKey(p))
            {
                j = map.get(p);
                j=j+1;
                map.put(p, j);
            }
            else
            {
                map.put(p,1);
            }
        }
       Set<Map.Entry<Character,Integer>> s = map.entrySet(); 
          
        for (Map.Entry<Character, Integer> it: s) 
        {
            hashcode h = new hashcode(it.getKey(),it.getValue());
            q.add(h);
             
        }
         
        
  
        
          while (q.size()>1) { 
                
                hashcode r=q.poll();
                System.out.println(r.freq);
                hashcode t=q.poll();
                hashcode p1=new hashcode();
                p1.c='-';
                p1.freq = r.freq + t.freq;
                p1.rlink = r;
                p1.llink = t;
                q.add(p1);
        }  
        
        hashcode root = q.remove();
        Code(root,"");
        
    }
    
}
